-----------------------------------------------------------
    VM Configuration
-----------------------------------------------------------
1. OS: CentOS7 Minimal Image ISO (link: http://centos.mirrors.estointernet.in/7.7.1908/isos/x86_64/)
2. Storage: 16 GB
3. RAM: 2048 GB
4. Cores: 2 Processors for Master; 1 Processor for Worker
5. Virtualization: Hyper-V
6. Network:
	a. Adapter1: NAT Network
	b. Adapter2: Host-only Adapter   

-----------------------------------------------------------
    CentOS  System Setup 
-----------------------------------------------------------
1. Check Network Interface
2. Bring Up Interface
    $ nmtui
    $ systemctl restart network
    $ sevice sshd restart

3. Stop and permanently disable the firewall on a CentOS 7 machine.
 * Disable Firewall
    sudo firewall-cmd --state
 * First, stop the FirewallD service with:
    sudo systemctl stop firewalld
 * Disable the FirewallD service to start automatically on system boot:
    sudo systemctl disable firewalld
 * Mask the FirewallD service which will prevent the firewall from being started by other services:
    sudo systemctl mask --now firewalld

4. Update Hostname
    $ hostnamectl set-hostname 'k8s-master'
    $ exec bash

4. Prerequisites
    $ sudo swapoff -a (/etc/fstab)
    $ sudo setenforce 0
    $ sudo sed -i --follow-symlinks 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/sysconfig/selinux

5. Check Everytime
	firewall-cmd --state
free -h
setenforce 0
-----------------------------------------------------------
    Root Configuration
-----------------------------------------------------------
Run Commands as root user:
$ su
$ firewall-cmd --permanent --add-port=6443/tcp
$ firewall-cmd --permanent --add-port=2379-2380/tcp
$ firewall-cmd --permanent --add-port=10250/tcp
$ firewall-cmd --permanent --add-port=10251/tcp
$ firewall-cmd --permanent --add-port=10252/tcp
$ firewall-cmd --permanent --add-port=10255/tcp
$ firewall-cmd --reload
$ modprobe br_netfilter
$ echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables

Update Repository:
$ cat <<EOF > /etc/yum.repos.d/kubernetes.repo 
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF

Install Kubernetes:
$ sudo yum install kubeadm kubectl kubelet kubernetes-cni -y
$ sudo yum install docker -y 
$ systemctl restart docker && systemctl enable docker
$ systemctl restart kubelet && systemctl enable kubelet

systemctl restart docker && systemctl enable docker
systemctl restart kubelet && systemctl enable kubelet
-----------------------------------------------------------
    Kubeadm <https://kubernetes.io/docs/reference/kubectl/cheatsheet/>
-----------------------------------------------------------
$ kubeadm init
[shell]
kubeadm join 10.0.2.4:6443 --token atrnqn.jbdyff35kpymlndv \
    --discovery-token-ca-cert-hash sha256:d8a7022c8edc955bb6f1e1a217eacd281f6ea131896afd9a2c010c717c39941e 

$ mkdir -p $HOME/.kube
$ cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
$ chown $(id -u):$(id -g) $HOME/.kube/config
$ export KUBECONFIG=/etc/kubernetes/admin.conf
$ export kubever=$(kubectl version | base64 | tr -d ‘\n’)

kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"
-----------------------------------------------------------
    Worker Node
-----------------------------------------------------------
1. Bring up interface
2. Update Hostname
3. Complete Prerequisites
4. Update Repository
5. Install Kubernetes
6. Join Master 
    $ kubeadm join 10.0.2.7:6443 --token c1zipc.23nhyj9cgcpqx3hb --discovery-token-ca-cert-hash sha256:efb873a435c6339ab507fb2b507d3f3246ebd38179d1c9a7ff7c437ed5c01814

Completed: (19-12-04 19:26) 

-----------------------------------------------------------
    Pod Creation
-----------------------------------------------------------

kubectl exec -it busybox1-- /bin/bash



apt update
apt install net-tools 
apt install tcpdump -y
apt install iproute2 -y

-----------------------------------------------------------
    Calico
-----------------------------------------------------------

kubeadm join 10.0.2.4:6443 --token jk150y.ta789kiqw4vsjrmu --discovery-token-ca-cert-hash sha256:1f029e185bf0d8269aa72c6a44fa241c31efd3d22bc56e35b03b2e682a6d9f5a

-----------------------------------------------------------
    CentOS Kubernetes Master Installation
-----------------------------------------------------------
Step 1: Disable SELinux & setup firewall rules
swapoff -a
> vi /etc/fstab: Comment Swap 
hostnamectl set-hostname 'k8s-master'
exec bash
setenforce 0
sed -i --follow-symlinks 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/sysconfig/selinux

firewall-cmd --permanent --add-port=6443/tcp
firewall-cmd --permanent --add-port=2379-2380/tcp
firewall-cmd --permanent --add-port=10250/tcp
firewall-cmd --permanent --add-port=10251/tcp
firewall-cmd --permanent --add-port=10252/tcp
firewall-cmd --permanent --add-port=10255/tcp
firewall-cmd --reload
modprobe br_netfilter
echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables

cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
        https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF

yum install kubeadm docker -y

systemctl restart docker && systemctl enable docker
systemctl  restart kubelet && systemctl enable kubelet


[root@k8s-master /]# kubeadm init
[init] Using Kubernetes version: v1.16.3
[preflight] Running pre-flight checks
        [WARNING Firewalld]: firewalld is active, please ensure ports [6443 10250] are open or your cluster may not function correctly
[preflight] Pulling images required for setting up a Kubernetes cluster
[preflight] This might take a minute or two, depending on the speed of your internet connection
[preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
[kubelet-start] Activating the kubelet service
[certs] Using certificateDir folder "/etc/kubernetes/pki"
[certs] Generating "ca" certificate and key
[certs] Generating "apiserver" certificate and key
[certs] apiserver serving cert is signed for DNS names [k8s-master kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 10.0.2.4]
[certs] Generating "apiserver-kubelet-client" certificate and key
[certs] Generating "front-proxy-ca" certificate and key
[certs] Generating "front-proxy-client" certificate and key
[certs] Generating "etcd/ca" certificate and key
[certs] Generating "etcd/server" certificate and key
[certs] etcd/server serving cert is signed for DNS names [k8s-master localhost] and IPs [10.0.2.4 127.0.0.1 ::1]
[certs] Generating "etcd/peer" certificate and key
[certs] etcd/peer serving cert is signed for DNS names [k8s-master localhost] and IPs [10.0.2.4 127.0.0.1 ::1]
[certs] Generating "etcd/healthcheck-client" certificate and key
[certs] Generating "apiserver-etcd-client" certificate and key
[certs] Generating "sa" key and public key
[kubeconfig] Using kubeconfig folder "/etc/kubernetes"
[kubeconfig] Writing "admin.conf" kubeconfig file
[kubeconfig] Writing "kubelet.conf" kubeconfig file
[kubeconfig] Writing "controller-manager.conf" kubeconfig file
[kubeconfig] Writing "scheduler.conf" kubeconfig file
[control-plane] Using manifest folder "/etc/kubernetes/manifests"
[control-plane] Creating static Pod manifest for "kube-apiserver"
[control-plane] Creating static Pod manifest for "kube-controller-manager"
[control-plane] Creating static Pod manifest for "kube-scheduler"
[etcd] Creating static Pod manifest for local etcd in "/etc/kubernetes/manifests"
[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory "/etc/kubernetes/manifests". This can take up to 4m0s
[apiclient] All control plane components are healthy after 38.007227 seconds
[upload-config] Storing the configuration used in ConfigMap "kubeadm-config" in the "kube-system" Namespace
[kubelet] Creating a ConfigMap "kubelet-config-1.16" in namespace kube-system with the configuration for the kubelets in the cluster
[upload-certs] Skipping phase. Please see --upload-certs
[mark-control-plane] Marking the node k8s-master as control-plane by adding the label "node-role.kubernetes.io/master=''"
[mark-control-plane] Marking the node k8s-master as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]
[bootstrap-token] Using token: p3vj0c.bonwmtka2d2c5d0z
[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles
[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials
[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
[bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster
[bootstrap-token] Creating the "cluster-info" ConfigMap in the "kube-public" namespace
[addons] Applied essential addon: CoreDNS
[addons] Applied essential addon: kube-proxy

Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 10.0.2.4:6443 --token 2fq99h.85jtwh3gem63ktyv \
    --discovery-token-ca-cert-hash sha256:b99106c43367bacb188648a7b3fe392a2ca0a60ae46b9c0d653328e14b4d71a9

export kubever=$(kubectl version | base64 | tr -d '\n')
kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$kubever"

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
https://kubernetes.io/docs/concepts/cluster-administration/addons/

-----------------------------------------------------------
    Pod
-----------------------------------------------------------
kubectl edit nodes k8s-worker1
kubectl label nods k8s-worker1 defnode=worker1
kubectl delete pods shell-demo
kubectl apply -f yamls/shell-1.yaml
kubectl get pods -o wide
kubectl exec -it shell-1 bash

[yaml]
apiVersion: v1
kind: ConfigMap
metadata:
  name: kube-dns
  namespace: kube-system
data:
  upstreamNameservers: |
    ["8.8.8.8"]
---
apiVersion: v1
kind: Pod
metadata:
  name: shell-1
spec:
  volumes:
  - name: shared-data
    emptyDir: {}
  containers:
  - name: nginx
    image: nginx
    volumeMounts:
    - name: shared-data
      mountPath: /usr/share/nginx/html
  hostNetwork: false
  dnsPolicy: Default
  nodeSelector:
    defnode: worker1
[\yaml]

apt update
apt install iputils-ping
apt install iproute2

-----------------------------------------------------------
    Pods Configuration
-----------------------------------------------------------
1. Master
s3: 10.0.2.4
s8: 192.168.56.104
gw: 192.168.56.1
dns: 192.168.43.179

2. Worker1
s3: 10.0.2.5
s8: 192.168.56.105
gw: 192.168.56.1
dns: 192.168.43.179

3. Worker2
s3: 10.0.2.6
s8: 192.168.56.106
gw: 192.168.56.1
dns: 192.168.43.179


-----------------------------------------------------------
    Replication Controller
-----------------------------------------------------------

kubectl delete rc web --cascade=false //Without affecting the pods

-----------------------------------------------------------
    Service
-----------------------------------------------------------

kubectl delete svc test-service
